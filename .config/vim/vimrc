"source $HOME/.config/vim/plugins.conf

set nocompatible    " Disables vi compatibilty
filetype off
filetype plugin on  "'beefier' syntax(?)
"Disables the auto comment insertion after starting a new
"line.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=ok
syntax on           " Enable syntax highlighting

set exrc
set secure

set wrap        "line wrap
set nobackup
set nowb
set noswapfile

"set autoindent
"set smartindent

" Tabbing
set ts=2
set sts=2
set sw=2
set expandtab

"set ai
"set si

" Search
set incsearch   " Enable incremental search
set hlsearch    " Enable highlight search
set ignorecase
set smartcase
set nohlsearch

set number relativenumber

set mouse=a    " enable mouse
set makeprg=gcc\ %

set backspace=indent,eol,start


let mapleader = ' '

:abbr #b "******************************

"*******************************
" vundle
"*******************************
" Set the runtime path to include Vundle and initialize
set rtp+=~/.config/vim/bundle/Vundle.vim
set runtimepath+=~/.config/vim.~/.config/vim/after
set viminfo+=n~/.config/vim/viminfo
call vundle#begin('~/.config/vim/plugged')
" Let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'
Plugin 'sheerun/vim-polyglot'
"Plugin 'jiangmiao/auto-pairs' 
"Plugin 'preservim/tagbar'
Plugin 'preservim/nerdtree'
Plugin 'lervag/vimtex'
call vundle#end()

"****************************** 
" vimtex
"******************************
let g:vimtex_view_method = 'zathura'
let g:vimtex_view_skim_sync = 1
let g:vimtex_view_skim_activate = 1
let maplocalleader = ' '

"******************************
" netrw
"******************************
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_winsize = 30
let g:netrw_altv = 1
let g:NetrwIsOpen=0

nnoremap <silent> <leader>lk :call ToggleNetrw()<CR>

func! ToggleNetrw()
  if g:NetrwIsOpen
    let i = bufnr("$")
      while (i >= 1)
        if (getbufvar(i, "&filetype") == "netrw")
          silent exe "bwipeout " . i
        endif
        let i-=1
      endwhile
    let g:NetrwIsOpen=0
  else
  let g:NetrwIsOpen=1
  silent Lexplore
  endif
endfunction

"***********************
" preservim/nerdtree.vim
"***********************
"nnoremap <leader>l :NERDTreeToggle<CR>

"***********************
" ptzz/lf.vim
"***********************
"let g:lf_map_keys = 0
"map <leader>l :lf<CR>
"map <leader>o :LfSplit<CR>

"***********************
" AutoPairs
"***********************
let g:AutoPairsShortcutToggle = '<C-P>'

"***********************
" CompileRun
"***********************
" '%' is a register that holds the current filename.
func! CompileRun()
exec "w"
if &filetype == 'c'
  exec "!gcc % -o %<" 
  exec "!time ./%<"
elseif &filetype == 'cpp'
  exec "!g++ -g -Wall *.cpp -o %<"
  exec "!time ./%<"
elseif &filetype == 'sh'
  exec "!time bash %"
elseif &filetype == 'ms'
  exec "!groff -ms % -T pdf > %:r.pdf"
endif
endfunc

"Compile and run ncurses.c
func! CompileGame()
exec "w"
exec "!(cd ..; make)"
endfunc

"Compile and run Groff
"Because for some reason it doesn't work in my if else branch?
func! CompileRoff()
  exec "w"
  exec "!refer -p ~/.config/bib % | groff -ms -T pdf > %:r.pdf"
endfunc

" Mappings
map <leader>o :call CompileRun()<CR>
map <leader>n :call CompileGame()<CR>
map <leader>r :call CompileRoff()<CR>

" Split vertically using "vs"
nnoremap vs :vs<CR>
" Split horizontally using "sp"
nnoremap sp :sp<CR>
" Move one pane left using "Shift H"
nnoremap H <C-W><C-H>
" Move one pane right using "Shift L"
nnoremap L <C-W><C-L>
" Move one pane down using "Shift J"
nnoremap J <C-W><C-J>
" Move one pane up using "Shift K"
nnoremap K <C-W><C-K>

nnoremap Q :wq<CR>
nnoremap ! :q!<CR>
