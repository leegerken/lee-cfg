set nocompatible
filetype off
"filetype plugin indent on "'beefier' syntax(?)
"syntax on  " Enable syntax highlighting

set runtimepath+=~/.config/vim.~/.config/vim/after

set viminfo+=n~/.config/vim/viminfo

"****************************************************
" vundle
"****************************************************

" Set the runtime path to include Vundle and initialize
set rtp+=~/.config/vim/bundle/Vundle.vim
" Download plug-ins to the ~/.vim/plugged/ directory
call vundle#begin('~/.vim/plugged')
" Let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'
Plugin 'sheerun/vim-polyglot'
"Plugin 'jiangmiao/auto-pairs'
"Plugin 'preservim/tagbar'
Plugin 'ptzz/lf.vim'
Plugin 'voldikss/vim-floaterm'
call vundle#end()
"**************************************************** 

set exrc
set secure

set nowrap

set nobackup
set nowb
set noswapfile

"set autoindent
"set smartindent
set ts=2
set sts=2
set sw=2
set expandtab

set ai
set si
set wrap

" Search
set incsearch  " Enable incremental search
set hlsearch   " Enable highlight search
set ignorecase
set smartcase

set number relativenumber

set splitbelow         " Always split below
set mouse=a            " Enable mouse drag on window splits
set makeprg=gcc\ %

let mapleader = ' '


:abbr #b "****************************************************

"**************************************************** 
" ptzz/lf.vim
"**************************************************** 
let g:lf_map_keys = 0
map <leader>l :Lf<CR>
map <leader>o :LfNewTab<CR>
let g:lf_width = 60
let g:floatterm_wintype = 'split'
let g:lf_wintype = 'split'

"**************************************************** 
" AutoPairs
"**************************************************** 
let g:AutoPairsShortcutToggle = '<C-P>'

"**************************************************** 
" CompileRun
"**************************************************** 
func! CompileRun()
exec "w"
if &filetype == 'c'
    exec "!gcc % -o %<"
    exec "!time ./%<"
elseif &filetype == 'cpp'
    exec "!g++ -g -Wall *.cpp -o %<"
    exec "!time ./%<"
elseif &filetype == 'sh'
    exec "!time bash %"
endif
endfunc

func! CompileRunNcurses()       "Compile and run ncurses.c
exec "w"
exec "!gcc % -lncurses -o %<"
exec "!time ./%<"
endfunc

map <leader>c :call CompileRun()<CR>
map <leader>n :call CompileRunNcurses()<CR>
