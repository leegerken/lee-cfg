filetype off
filetype plugin on "'beefier' syntax(?)
syntax on  " Enable syntax highlighting

"***************************************************
" vundle
"***************************************************
" Set the runtime path to include Vundle and initialize
set rtp+=~/.config/vim/bundle/Vundle.vim
set runtimepath+=~/.config/vim.~/.config/vim/after
set viminfo+=n~/.config/vim/viminfo
" Download plug-ins to the ~/.vim/plugged/ directory
call vundle#begin('~/.config/vim/plugged')
" Let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'
Plugin 'sheerun/vim-polyglot'
"Plugin 'jiangmiao/auto-pairs' 
"Plugin 'preservim/tagbar'
Plugin 'preservim/nerdtree'
"Plugin 'ptzz/lf.vim'
"Plugin 'voldikss/vim-floaterm'
call vundle#end()

set backspace=indent,eol,start
set nocompatible

set exrc
set secure

set nowrap

set nobackup
set nowb
set noswapfile

"set autoindent
"set smartindent
set ts=2
set sts=2
set sw=2
set expandtab

set ai
set si
set wrap

" Search
set incsearch   " Enable incremental search
set hlsearch    " Enable highlight search
set ignorecase
set smartcase
set nohlsearch

set number relativenumber

set mouse-=a    " disable mouse
set makeprg=gcc\ %

let mapleader = ' '

:abbr #b "*************************************************** 

"************************************************** 
" netrw
"**************************************************
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_winsize = 30
let g:netrw_altv = 1

let g:NetrwIsOpen=0

nnoremap <silent> <leader>l :call ToggleNetrw()<CR>

func! ToggleNetrw()
  if g:NetrwIsOpen
    let i = bufnr("$")
      while (i >= 1)
        if (getbufvar(i, "&filetype") == "netrw")
          silent exe "bwipeout " . i
        endif
        let i-=1
      endwhile
    let g:NetrwIsOpen=0
  else
  let g:NetrwIsOpen=1
  silent Lexplore
  endif
endfunction

"***************************************************
" preservim/nerdtree.vim
"***************************************************
"nnoremap <leader>l :NERDTreeToggle<CR>

"***************************************************
" ptzz/lf.vim
"***************************************************
"let g:lf_map_keys = 0
"map <leader>l :lf<CR>
"map <leader>o :LfSplit<CR>

"**************************************************
" AutoPairs
"************************************************** 
let g:AutoPairsShortcutToggle = '<C-P>'

"************************************************** 
" CompileRun
"**************************************************
func! CompileRun()
exec "w"
if &filetype == 'c'
    exec "!gcc % -o %<"
    exec "!time ./%<"
elseif &filetype == 'cpp'
    exec "!g++ -g -Wall *.cpp -o %<"
    exec "!time ./%<"
elseif &filetype == 'sh'
    exec "!time bash %"
endif
endfunc

"Compile using make and add changes to git
func! CompileMake() 
exec "w"
exec "!doas make install %<"
endfunc

"Compile and run ncurses.c
func! CompileRunNcurses()
exec "w"
exec "!gcc % -lncurses -o %<"
exec "!time ./%<"
endfunc

map <leader>c :call CompileRun()<CR>
map <leader>n :call CompileRunNcurses()<CR>
map <leader>m :call CompileMake()<CR>

" Split vertically using "vs"
nnoremap vs :vs<CR>

" Split horizontally using "sp"
nnoremap sp :sp<CR>

" Move one pane left using "Shift H"
nnoremap H <C-W><C-H>

" Move one pane right using "Shift L"
nnoremap L <C-W><C-L>

" Move one pane down using "Shift J"
nnoremap J <C-W><C-J>

" Move one pane up using "Shift K"
nnoremap K <C-W><C-K>

nnoremap Q :wq<CR>
nnoremap ! :q!<CR>
